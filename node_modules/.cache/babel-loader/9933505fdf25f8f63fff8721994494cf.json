{"ast":null,"code":"var _jsxFileName = \"/Users/rimaatwork/Documents/GitHub/pomodoro-project-timer/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusBreakDuration from \"../FocusBreakDuration\";\nimport TimerControls from \"../TimerControls\";\nimport FocusBreakMessage from \"..FocusBreakMessage\";\nimport ProgressBar from \"../ProgressBar\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [firstPlay, setFirstPlay] = useState(true);\n  const [onBreak, setOnBreak] = useState(false);\n  const [activeSession, setActiveSession] = useState(false);\n  const [focusDurationMinutes, setFocusDurationMinutes] = useState(25);\n  const [breakDurationMinutes, setBreakDurationMinutes] = useState(5);\n  const [durationMinutes, setDurationMinutes] = useState(25);\n  const [durationSeconds, setDurationSeconds] = useState(0);\n  const [initialDuration, setInitialDuration] = useState(25);\n  const [initialBreakDuration, setInitialBreakDuration] = useState(5);\n  const [durationProgress, setDurationProgress] = useState(0);\n\n  function percentage(currentMinutes, currentSeconds, initialMinutes) {\n    return 100 - (currentMinutes * 60 + currentSeconds) / (initialMinutes * 60) * 100;\n  }\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    setDurationSeconds(second => {\n      second === 0 ? second = 59 : second -= 1;\n      if (second === 59) setDurationMinutes(minutes => minutes = durationMinutes - 1);\n      return second;\n    });\n    if (onBreak) setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialBreakDuration));else setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialDuration));\n    if (durationMinutes === 0 && durationSeconds === 1) timerExpired();\n  }, isTimerRunning ? 1000 : null);\n\n  function timerExpired() {\n    if (!onBreak) focusSessionExpired();else breakSessionExpired();\n  }\n\n  function focusSessionExpired() {\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play(); // Play's a gong sound\n\n    setOnBreak(state => state = true);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(minutes => minutes = initialBreakDuration);\n  }\n\n  function breakSessionExpired() {\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/0899.mp3`).play(); // Play's a bell alert\n\n    setOnBreak(state => state = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(minutes => minutes = initialDuration);\n  }\n\n  function playPause() {\n    if (firstPlay) {\n      setInitialDuration(duration => duration = focusDurationMinutes);\n      setInitialBreakDuration(duration => duration = breakDurationMinutes);\n      setDurationMinutes(duration => duration = focusDurationMinutes);\n      setFirstPlay(state => state = false);\n    }\n\n    setActiveSession(state => state = true);\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  function stopButton() {\n    setFirstPlay(state => state = true);\n    setIsTimerRunning(state => state = false);\n    setOnBreak(state => state = false);\n    setActiveSession(state => state = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(duration => duration = focusDurationMinutes);\n    setInitialDuration(duration => duration = focusDurationMinutes);\n    setInitialBreakDuration(duration => duration = breakDurationMinutes);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(FocusBreakDuration, {\n    focusDurationMinutes: focusDurationMinutes,\n    isTimerRunning: isTimerRunning,\n    firstPlay: firstPlay,\n    setFocusDurationMinutes: setFocusDurationMinutes,\n    breakDurationMinutes: breakDurationMinutes,\n    setBreakDurationMinutes: setBreakDurationMinutes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(TimerControls, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    stopButton: stopButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(FocusBreakMessage, {\n    onBreak: onBreak,\n    initialDuration: initialDuration,\n    initialBreakDuration: initialBreakDuration,\n    durationMinutes: durationMinutes,\n    durationSeconds: durationSeconds,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    durationProgress: durationProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 4\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/rimaatwork/Documents/GitHub/pomodoro-project-timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","FocusBreakDuration","TimerControls","FocusBreakMessage","ProgressBar","minutesToDuration","secondsToDuration","Pomodoro","isTimerRunning","setIsTimerRunning","firstPlay","setFirstPlay","onBreak","setOnBreak","activeSession","setActiveSession","focusDurationMinutes","setFocusDurationMinutes","breakDurationMinutes","setBreakDurationMinutes","durationMinutes","setDurationMinutes","durationSeconds","setDurationSeconds","initialDuration","setInitialDuration","initialBreakDuration","setInitialBreakDuration","durationProgress","setDurationProgress","percentage","currentMinutes","currentSeconds","initialMinutes","second","minutes","currentProgress","timerExpired","focusSessionExpired","breakSessionExpired","Audio","play","state","progress","seconds","playPause","duration","prevState","stopButton"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusBreakDuration from \"../FocusBreakDuration\";\nimport TimerControls from \"../TimerControls\";\nimport FocusBreakMessage from \"..FocusBreakMessage\";\nimport ProgressBar from \"../ProgressBar\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\n\nfunction Pomodoro() {\n\tconst [isTimerRunning, setIsTimerRunning] = useState(false);\n\tconst [firstPlay, setFirstPlay] = useState(true);\n\tconst [onBreak, setOnBreak] = useState(false);\n\tconst [activeSession, setActiveSession] = useState(false);\n\tconst [focusDurationMinutes, setFocusDurationMinutes] = useState(25);\n\tconst [breakDurationMinutes, setBreakDurationMinutes] = useState(5);\n\tconst [durationMinutes, setDurationMinutes] = useState(25);\n\tconst [durationSeconds, setDurationSeconds] = useState(0);\n\tconst [initialDuration, setInitialDuration] = useState(25);\n\tconst [initialBreakDuration, setInitialBreakDuration] = useState(5);\n\tconst [durationProgress, setDurationProgress] = useState(0);\n\n\tfunction percentage(currentMinutes, currentSeconds, initialMinutes) {\n\t\treturn (\n\t\t\t100 - ((currentMinutes * 60 + currentSeconds) / (initialMinutes * 60)) * 100\n\t\t);\n\t}\n\n\tuseInterval(\n\t\t() => {\n\t\t\t// ToDo: Implement what should happen when the timer is running\n\t\t\tsetDurationSeconds((second) => {\n\t\t\t\tsecond === 0 ? (second = 59) : (second -= 1);\n\t\t\t\tif (second === 59)\n\t\t\t\t\tsetDurationMinutes((minutes) => (minutes = durationMinutes - 1));\n\t\t\t\treturn second;\n\t\t\t});\n\n\t\t\tif (onBreak)\n\t\t\t\tsetDurationProgress(\n\t\t\t\t\t(currentProgress) =>\n\t\t\t\t\t\t(currentProgress = percentage(\n\t\t\t\t\t\t\tdurationMinutes,\n\t\t\t\t\t\t\tdurationSeconds,\n\t\t\t\t\t\t\tinitialBreakDuration\n\t\t\t\t\t\t))\n\t\t\t\t);\n\t\t\telse\n\t\t\t\tsetDurationProgress(\n\t\t\t\t\t(currentProgress) =>\n\t\t\t\t\t\t(currentProgress = percentage(\n\t\t\t\t\t\t\tdurationMinutes,\n\t\t\t\t\t\t\tdurationSeconds,\n\t\t\t\t\t\t\tinitialDuration\n\t\t\t\t\t\t))\n\t\t\t\t);\n\n\t\t\tif (durationMinutes === 0 && durationSeconds === 1) timerExpired();\n\t\t},\n\t\tisTimerRunning ? 1000 : null\n\t);\n\n\tfunction timerExpired() {\n\t\tif (!onBreak) focusSessionExpired();\n\t\telse breakSessionExpired();\n\t}\n\n\tfunction focusSessionExpired() {\n\t\tnew Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play(); // Play's a gong sound\n\t\tsetOnBreak((state) => (state = true));\n\t\tsetDurationProgress((progress) => (progress = 0));\n\t\tsetDurationSeconds((seconds) => (seconds = 0));\n\t\tsetDurationMinutes((minutes) => (minutes = initialBreakDuration));\n\t}\n\n\tfunction breakSessionExpired() {\n\t\tnew Audio(`https://bigsoundbank.com/UPLOAD/mp3/0899.mp3`).play(); // Play's a bell alert\n\t\tsetOnBreak((state) => (state = false));\n\t\tsetDurationProgress((progress) => (progress = 0));\n\t\tsetDurationSeconds((seconds) => (seconds = 0));\n\t\tsetDurationMinutes((minutes) => (minutes = initialDuration));\n\t}\n\n\tfunction playPause() {\n\t\tif (firstPlay) {\n\t\t\tsetInitialDuration((duration) => (duration = focusDurationMinutes));\n\t\t\tsetInitialBreakDuration((duration) => (duration = breakDurationMinutes));\n\t\t\tsetDurationMinutes((duration) => (duration = focusDurationMinutes));\n\t\t\tsetFirstPlay((state) => (state = false));\n\t\t}\n\t\tsetActiveSession((state) => (state = true));\n\t\tsetIsTimerRunning((prevState) => !prevState);\n\t}\n\tfunction stopButton() {\n\t\tsetFirstPlay((state) => (state = true));\n\t\tsetIsTimerRunning((state) => (state = false));\n\t\tsetOnBreak((state) => (state = false));\n\t\tsetActiveSession((state) => (state = false));\n\n\t\tsetDurationProgress((progress) => (progress = 0));\n\t\tsetDurationSeconds((seconds) => (seconds = 0));\n\t\tsetDurationMinutes((duration) => (duration = focusDurationMinutes));\n\t\tsetInitialDuration((duration) => (duration = focusDurationMinutes));\n\t\tsetInitialBreakDuration((duration) => (duration = breakDurationMinutes));\n\t}\n\n\treturn (\n\t\t<div className=\"pomodoro\">\n\t\t\t<FocusBreakDuration\n\t\t\t\tfocusDurationMinutes={focusDurationMinutes}\n\t\t\t\tisTimerRunning={isTimerRunning}\n\t\t\t\tfirstPlay={firstPlay}\n\t\t\t\tsetFocusDurationMinutes={setFocusDurationMinutes}\n\t\t\t\tbreakDurationMinutes={breakDurationMinutes}\n\t\t\t\tsetBreakDurationMinutes={setBreakDurationMinutes}\n\t\t\t/>\n\t\t\t<TimerControls\n\t\t\t\tplayPause={playPause}\n\t\t\t\tisTimerRunning={isTimerRunning}\n\t\t\t\tstopButton={stopButton}\n\t\t\t/>\n\t\t\t<FocusBreakMessage\n\t\t\t\tonBreak={onBreak}\n\t\t\t\tinitialDuration={initialDuration}\n\t\t\t\tinitialBreakDuration={initialBreakDuration}\n\t\t\t\tdurationMinutes={durationMinutes}\n\t\t\t\tdurationSeconds={durationSeconds}\n\t\t\t\tisTimerRunning={isTimerRunning}\n\t\t\t/>\n\t\t\t<ProgressBar durationProgress={durationProgress} />\n\t\t</div>\n\t);\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}